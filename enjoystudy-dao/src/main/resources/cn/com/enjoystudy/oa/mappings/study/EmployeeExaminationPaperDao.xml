<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.com.enjoystudy.oa.dao.study.EmployeeExaminationPaperDao">
    <insert id="insert" parameterType="cn.com.enjoystudy.oa.bean.study.EmployeeExaminationPaper" >
        insert into employee_examination_paper (id, create_time, update_time, flag, status,
        paper_id, paper_title, employee_id, employee_name, course_id, course_name, test_type, test_state, test_amount,
        duration, question_amount, question_type, total_score, pass_score, test_score, pass_state, single_amount,
        multi_amount, judge_amount, check_amount, fill_amount, join_state, start_time, end_time, submit_time)
        values (#{id}::uuid, #{createTime}, #{updateTime}, #{flag}, #{status},
        #{paperId}::uuid, #{paperTitle}, #{employeeId}::uuid, #{employeeName}, #{courseId}::uuid, #{courseName}, #{testType},
        #{testState}, #{testAmount}, #{duration}, #{questionAmount}, #{questionType}, #{totalScore}, #{passScore},
        #{testScore}, #{passState}, #{singleAmount}, #{multiAmount}, #{judgeAmount}, #{checkAmount}, #{fillAmount},
        #{joinState}, #{startTime}, #{endTime}, #{submitTime})
    </insert>

    <update id="update" parameterType="cn.com.enjoystudy.oa.bean.study.EmployeeExaminationPaper" >
        update employee_examination_paper set update_time = #{updateTime},
        paper_id = #{paperId}::uuid, paper_title = #{paperTitle}, employee_id = #{employeeId}::uuid, employee_name = #{employeeName},
        course_id = #{courseId}::uuid, course_name = #{courseName}, test_type = #{testType}, test_state = #{testState},
        test_amount = #{testAmount}, duration = #{duration}, question_amount = #{questionAmount}, question_type = #{questionType},
        total_score = #{totalScore}, pass_score = #{passScore}, test_score = #{testScore}, pass_state = #{passState},
        single_amount = #{singleAmount}, multi_amount = #{multiAmount}, judge_amount = #{judgeAmount}, check_amount = #{checkAmount},
        fill_amount = #{fillAmount}, join_state = #{joinState}, start_time = #{startTime}, end_time = #{endTime},
        submit_time = #{submitTime} where id = #{id}::uuid
    </update>

    <select id="getById" resultMap="resultPaperMap">
        select id, paper_id, paper_title, employee_id, employee_name, course_id, course_name, test_type, test_state,
        test_amount, duration, question_amount, question_type, total_score, pass_score, test_score, pass_state,
        single_amount, multi_amount, judge_amount, check_amount, fill_amount, join_state, start_time, end_time, submit_time
        from employee_examination_paper where id = #{id}::uuid and flag = true and status = true
    </select>

    <resultMap id="resultPaperMap" type="cn.com.enjoystudy.oa.bean.study.EmployeeExaminationPaper">
        <result column="id" jdbcType="VARCHAR" property="id" />
        <result column="paper_id" jdbcType="VARCHAR" property="paperId" />
        <result column="paper_title" jdbcType="VARCHAR" property="paperTitle" />
        <result column="employee_id" jdbcType="VARCHAR" property="employeeId" />
        <result column="employee_name" jdbcType="VARCHAR" property="employeeName" />
        <result column="course_id" jdbcType="VARCHAR" property="courseId" />
        <result column="course_name" jdbcType="VARCHAR" property="courseName" />
        <result column="test_type" jdbcType="INTEGER" property="testType" />
        <result column="test_state" jdbcType="INTEGER" property="testState" />
        <result column="test_amount" jdbcType="INTEGER" property="testAmount" />
        <result column="duration" jdbcType="INTEGER" property="duration" />
        <result column="question_amount" jdbcType="INTEGER" property="questionAmount" />
        <result column="question_type" jdbcType="INTEGER" property="questionType" />
        <result column="total_score" jdbcType="INTEGER" property="totalScore" />
        <result column="pass_score" jdbcType="INTEGER" property="passScore" />
        <result column="pass_state" jdbcType="BOOLEAN" property="passState" />
        <result column="single_amount" jdbcType="INTEGER" property="singleAmount" />
        <result column="multi_amount" jdbcType="INTEGER" property="multiAmount" />
        <result column="judge_amount" jdbcType="INTEGER" property="judgeAmount" />
        <result column="check_amount" jdbcType="INTEGER" property="checkAmount" />
        <result column="join_state" jdbcType="INTEGER" property="joinState" />
        <result column="start_time" jdbcType="TIMESTAMP" property="startTime" />
        <result column="end_time" jdbcType="TIMESTAMP" property="endTime" />
        <result column="submit_time" jdbcType="TIMESTAMP" property="submitTime" />
        <collection property="questionList" column="{paperId=id}" javaType="java.util.List"
            ofType="cn.com.enjoystudy.oa.bean.study.EmployeeExaminationQuestion" select="findQuestionByPaperId"/>
    </resultMap>

    <update id="deleteById">
        update employee_examination_paper set flag = false, status = false where id = #{id}::uuid
    </update>

    <select id="list" resultType="cn.com.enjoystudy.oa.bean.study.EmployeeExaminationPaper"
            parameterType="cn.com.enjoystudy.oa.bean.study.EmployeeExaminationPaperSO">
        select id, paper_id, paper_title, employee_id, employee_name, course_id, course_name, test_type, test_state,
        test_amount, duration, question_amount, question_type, total_score, pass_score, test_score, pass_state,
        single_amount, multi_amount, judge_amount, check_amount, fill_amount, join_state, start_time, end_time, submit_time
        from employee_examination_paper
        where flag = true and status = true
        <if test="employeeId != null and '' != employeeId"> and employee_id = #{employeeId}::uuid </if>
        <if test="null != employeeIds and employeeIds.length > 0">
            and employee_id in <foreach collection="employeeIds" item="item" index="index" open="(" close=")" separator=","> #{item}::uuid </foreach>
        </if>
        <if test="paperId != null and '' != paperId"> and paper_id = #{paperId}::uuid </if>
        <if test="courseId != null and '' != courseId"> and course_id = #{courseId}::uuid </if>
        <if test="testState != null"> and test_state = #{testState} </if>
        <if test="passState != null"> and pass_state = #{passState} </if>
        <if test="null != testStates and testStates.length > 0">
            and test_state in <foreach collection="testStates" item="state" index="index" open="(" close=")" separator=",">#{state}</foreach>
        </if>
    </select>

    <select id="count" resultType="long">
        select count(id) amount from employee_examination_paper
        where flag = true and status = true
        <if test="employeeId != null and '' != employeeId"> and employee_id = #{employeeId}::uuid </if>
        <if test="paperId != null and '' != paperId"> and paper_id = #{paperId}::uuid </if>
        <if test="courseId != null and '' != courseId"> and course_id = #{courseId}::uuid </if>
        <if test="testState != null"> and test_state = #{testState} </if>
        <if test="passState != null"> and test_state = #{passState} </if>
    </select>

    <select id="getTestAmount" resultType="long">
        select count(id) amount from employee_examination_paper
        where flag = true and status = true and course_id = #{courseId}::uuid and employee_id = #{employeeId}::uuid
    </select>

    <select id="findQuestionByPaperId" resultMap="resultQuestionMap">
        select id, paper_id, question_id, title, category, score, answer_state, right_state
        from employee_examination_question
        where paper_id = #{paperId}::uuid and flag = true and status = true
    </select>

    <resultMap id="resultQuestionMap" type="cn.com.enjoystudy.oa.bean.study.EmployeeExaminationQuestion">
        <result column="id" jdbcType="VARCHAR" property="id" />
        <result column="paper_id" jdbcType="VARCHAR" property="paperId" />
        <result column="question_id" jdbcType="VARCHAR" property="questionId" />
        <result column="title" jdbcType="VARCHAR" property="title" />
        <result column="category" jdbcType="INTEGER" property="category" />
        <result column="score" jdbcType="INTEGER" property="score" />
        <result column="answer_state" jdbcType="INTEGER" property="answerState" />
        <result column="right_state" jdbcType="BOOLEAN" property="rightState" />
        <association property="analysis" column="{questionId=id}" select="findQuestionAnalysisByQuestionId"
             javaType="cn.com.enjoystudy.oa.bean.study.EmployeeExaminationQuestionAnalysis"/>
        <collection property="itemList" column="{questionId=id}" javaType="java.util.List"
            ofType="cn.com.enjoystudy.oa.bean.study.EmployeeExaminationQuestionItem" select="findQuestionItemByQuestionId"/>
    </resultMap>

    <select id="findQuestionItemByQuestionId" resultType="cn.com.enjoystudy.oa.bean.study.EmployeeExaminationQuestionItem">
        select id, question_id, title, is_answer, check_state
        from employee_examination_question_item
        where question_id = #{questionId}::uuid and flag = true and status = true
    </select>

    <select id="findQuestionAnalysisByQuestionId" resultType="cn.com.enjoystudy.oa.bean.study.EmployeeExaminationQuestionAnalysis">
        select id, question_id, content from employee_examination_question_analysis
        where question_id = #{questionId}::uuid and flag = true and status = true
    </select>

    <select id="findScoreList" resultType="cn.com.enjoystudy.oa.bean.study.EmployeeExaminationScore">
        select s.id employee_id, s.code employee_account, s.full_name employee_name, c.id course_id, c.name course_name, p. start_time, p.test_score, p.pass_state
        from employee_account s
        left join employee_examination_paper p on s.id = p.employee_id
        left join course c on c.id = p.course_id
        where s.flag = true and s.status = true
        <if test="employeeId != null and '' != employeeId"> and s.id = #{employeeId}::uuid </if>
        <if test="null != employeeIds and employeeIds.length > 0">
            and s.id in <foreach collection="employeeIds" item="item" index="index" open="(" close=")" separator=","> #{item}::uuid </foreach>
        </if>
        <if test="courseId != null and '' != courseId"> and c.id = #{courseId}::uuid </if>
        <if test="testState != null"> and p.test_state = #{testState} </if>
        <if test="passState != null"> and p.pass_state = #{passState} </if>
    </select>
    
    <update id="deleteQuestionByPaperId">
        update employee_examination_question set flag = false, status = false where paper_id = #{paperId}::uuid
    </update>
    
    <update id="deleteQuestionItemByPaperId">
        update employee_examination_question_item set flag = false, status = false
        where question_id in (select id from employee_examination_question where paper_id = #{paperId}::uuid)
    </update>
    
    <update id="deleteQuestionAnalysisByPaperId">
        update employee_examination_question_analysis set flag = false, status = false
        where question_id in (select id from employee_examination_question where paper_id = #{paperId}::uuid)
    </update>
</mapper>