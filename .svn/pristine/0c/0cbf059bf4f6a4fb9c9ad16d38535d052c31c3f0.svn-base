package cn.com.enjoystudy.oa.webapps.manage.study;

import cn.com.enjoystudy.oa.bean.base.EmployeeAccount;
import cn.com.enjoystudy.oa.bean.study.*;
import cn.com.enjoystudy.oa.filter.ManageSessionFilter;
import cn.com.enjoystudy.oa.service.study.*;
import cn.com.enjoystudy.oa.webapps.BaseController;
import com.alibaba.fastjson.JSONObject;
import com.github.pagehelper.PageInfo;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.subject.Subject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;

@Controller
@RequestMapping("/manage/study/employee-examination")
public class EmployeeExaminationController extends BaseController {
    @Autowired
    private CourseService courseService;
    @Autowired
    private EmployeeExaminationPaperService employeeExaminationPaperService;
    @Autowired
    private EmployeeExaminationQuestionService employeeExaminationQuestionService;
    @Autowired
    private EmployeeExaminationQuestionAnalysisService employeeExaminationQuestionAnalysisService;
    @Autowired
    private EmployeeExaminationQuestionItemService employeeExaminationQuestionItemService;
    @Autowired
    private CourseVideoService courseVideoService;
    @Autowired
    private EmployeeCourseStudyService employeeCourseStudyService;
    @Autowired
    private StorePaperService storePaperService;
    @Autowired
    private StoreQuestionService storeQuestionService;
    @Autowired
    private StoreQuestionAnalysisService storeQuestionAnalysisService;
    @Autowired
    private StoreQuestionItemService storeQuestionItemService;

    @RequestMapping("course-index")
    public ModelAndView courseIndex() {
        ModelAndView mv = new ModelAndView("manage/study/employee-examination/course-index");
        return mv;
    }

    @RequestMapping("course-list")
    @ResponseBody
    public JSONObject courseList(CourseSO so) {
        so.setTestState(2);
        PageInfo<Course> pageInfo = courseService.findPag(so);
        JSONObject json = resultSuccess();
        json.put("datas", pageInfo.getList());
        json.put("total", pageInfo.getTotal());
        json.put("pages", pageInfo.getPages());
        return json;
    }

    @RequestMapping("check-test")
    @ResponseBody
    public JSONObject checkTest(@RequestParam("courseId") String courseId) {
        Course course = courseService.getById(courseId);
        if (null != course && course.getTestState().equals(2)) {
            Subject subject = SecurityUtils.getSubject();
            Object object = subject.getSession().getAttribute(ManageSessionFilter.DEFAULT_LOGIN_USER);
            EmployeeAccount account = (EmployeeAccount) object;

            long testAmount = employeeExaminationPaperService.getTestAmount(account.getId(), course.getId());
            if (testAmount <= course.getTestAmount()) {
                CourseVideoSO videoSO = new CourseVideoSO();
                videoSO.setCourseId(course.getId());
                long videoAmount = courseVideoService.getCount(videoSO);
                long studyAmount = employeeCourseStudyService.getStudyAmount(account.getId(), course.getId());

                if (studyAmount >= videoAmount) {
                    StorePaperSO paperSO = new StorePaperSO();
                    paperSO.setCourseId(course.getId());
                    List<StorePaper> storePaperList = storePaperService.list(paperSO);
                    if (null != storePaperList && storePaperList.size() > 0) {
                        Calendar calendar = Calendar.getInstance();

                        Random random = new Random();
                        StorePaper storePaper = storePaperList.get(random.nextInt(storePaperList.size()));

                        EmployeeExaminationPaper examinationPaper = new EmployeeExaminationPaper();
                        examinationPaper.setEmployeeId(account.getId());
                        examinationPaper.setEmployeeName(account.getFullName());
                        examinationPaper.setCourseId(course.getId());
                        examinationPaper.setCourseName(course.getName());
                        examinationPaper.setPaperId(storePaper.getId());
                        examinationPaper.setPaperTitle(storePaper.getTitle());
                        examinationPaper.setStartTime(calendar.getTime());
                        calendar.add(Calendar.MINUTE, storePaper.getDuration());
                        examinationPaper.setEndTime(calendar.getTime());
                        examinationPaper.setTestScore(0);
                        examinationPaper.setPassState(false);
                        examinationPaper.setPassScore(storePaper.getPassScore());
                        examinationPaper.setTotalScore(storePaper.getTotalScore());
                        examinationPaper.setJoinState(1);
                        examinationPaper.setTestState(1);
                        examinationPaper.setSingleAmount(0);
                        examinationPaper.setMultiAmount(0);
                        examinationPaper.setFillAmount(0);
                        examinationPaper.setCheckAmount(0);
                        examinationPaper.setJudgeAmount(0);

                        employeeExaminationPaperService.insert(examinationPaper);

                        StoreQuestionSO questionSO = new StoreQuestionSO();
                        questionSO.setPaperId(storePaper.getId());
                        List<StoreQuestion> storeQuestionList = storeQuestionService.list(questionSO);
                        if (null != storeQuestionList && storeQuestionList.size() > 0) {
                            for (StoreQuestion storeQuestion : storeQuestionList) {
                                EmployeeExaminationQuestion examinationQuestion = new EmployeeExaminationQuestion();
                                examinationQuestion.setPaperId(examinationPaper.getId());
                                examinationQuestion.setCategory(storeQuestion.getCategory());
                                examinationQuestion.setScore(storeQuestion.getScore());
                                examinationQuestion.setTitle(storeQuestion.getTitle());
                                examinationQuestion.setAnswerState(1);
                                examinationQuestion.setRightState(false);
                                employeeExaminationQuestionService.insert(examinationQuestion);

                                StoreQuestionItemSO questionItemSO = new StoreQuestionItemSO();
                                questionItemSO.setQuestionId(storeQuestion.getId());
                                List<StoreQuestionItem> storeQuestionItemList = storeQuestionItemService.list(questionItemSO);
                                if (null != storeQuestionItemList && storeQuestionItemList.size() > 0) {
                                    for (StoreQuestionItem storeQuestionItem : storeQuestionItemList) {
                                        EmployeeExaminationQuestionItem examinationQuestionItem = new EmployeeExaminationQuestionItem();
                                        examinationQuestionItem.setTitle(storeQuestionItem.getTitle());
                                        examinationQuestionItem.setAnswer(storeQuestionItem.getAnswer());
                                        examinationQuestionItem.setCheckState(false);
                                        examinationQuestionItem.setQuestionId(examinationQuestion.getQuestionId());
                                        employeeExaminationQuestionItemService.insert(examinationQuestionItem);
                                    }
                                }

                                StoreQuestionAnalysis questionAnalysis = storeQuestionAnalysisService.getAnalysisQuestionId(storeQuestion.getId());
                                if (null != questionAnalysis) {
                                    EmployeeExaminationQuestionAnalysis examinationQuestionAnalysis = new EmployeeExaminationQuestionAnalysis();
                                    examinationQuestionAnalysis.setContent(questionAnalysis.getContent());
                                    examinationQuestionAnalysis.setQuestionId(examinationQuestion.getId());
                                    employeeExaminationQuestionAnalysisService.insert(examinationQuestionAnalysis);
                                }
                            }
                        }
                        return resultSuccess();
                    } else {
                        return resultError("尚未发现考试，请联系管理员或老师！");
                    }

                } else {
                    return resultError("课程视频尚未学习完成，暂不能参加该课程考试。");
                }
            } else {
                return resultError("您已经超过补考次数！不能再进行考试，请您回去复习再申请考试，加油！");
            }
        } else {
            return resultError("考试尚未开始或已经结束");
        }
    }
}
